name: Split

on:
  workflow_dispatch:
    inputs:
      version:
        description: "New version"
        required: true
      packages: 
        description: "Packages to deploy (JSON object with package info)"
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.BOT }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      package-list: ${{ steps.parse.outputs.package-list }}
      core-version: ${{ steps.parse.outputs.core-version }}
    steps:
      - name: Parse packages
        id: parse
        run: |
          # Create a temp file to avoid shell injection
          cat > packages.json << 'EOF'
          ${{ github.event.inputs.packages }}
          EOF
          
          echo "Raw packages file:"
          cat packages.json
          
          # Check if this is a prerelease version
          VERSION="${{ github.event.inputs.version }}"
          if [[ $VERSION =~ -(alpha|beta|rc) ]]; then
            echo "ðŸš§ Detected prerelease version: $VERSION"
            IS_PRERELEASE=true
          else
            echo "âœ… Detected stable version: $VERSION"
            IS_PRERELEASE=false
          fi
          
          echo "Parsed packages:"
          jq -r 'to_entries[] | "\(.key): Messages=[\(.value["release-message"] | join(", "))] Stability=\(.value["minimum-stability"] // "unknown")"' packages.json
          
          # Create package list for matrix
          package_list=$(jq -r 'keys | @json' packages.json)
          echo "package-list=$package_list" >> $GITHUB_OUTPUT
          
          # Set core version from input (exact version)
          echo "core-version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Package list for matrix: $package_list"
          echo "Is prerelease: $IS_PRERELEASE"

  split:
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.package-list != '[]' }}
    
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.prepare.outputs.package-list) }}

    steps:
      - uses: actions/checkout@v4

      - name: Replace core version in composer.json
        working-directory: packages/${{ matrix.package }}
        run: |
          if [ -f composer.json ]; then
            echo "Updating moox/core version in ${{ matrix.package }} to ${{ needs.prepare.outputs.core-version }}"
            sed -i 's/"moox\/core": "\*"/"moox\/core": "${{ needs.prepare.outputs.core-version }}"/g' composer.json
            
            echo "Updated composer.json:"
            cat composer.json | grep "moox/core" || echo "No moox/core dependency found"
          else
            echo "No composer.json found in ${{ matrix.package }}"
          fi

      - name: Commit changes
        working-directory: packages/${{ matrix.package }}
        run: |
          if [ -f composer.json ]; then
            git config --global user.name "mooxbot"
            git config --global user.email "bot@moox.org"
            git add composer.json
            git commit -m "Update moox/core dependency to ${{ needs.prepare.outputs.core-version }}" || echo "No changes to commit"
          fi

      - name: Split package to separate repository
        uses: "symplify/monorepo-split-github-action@v2.3.0"
        with:
          tag: "v${{ github.event.inputs.version }}"
          package_directory: "packages/${{ matrix.package }}"
          repository_organization: "mooxphp"
          repository_name: "${{ matrix.package }}"
          user_name: "mooxbot"
          user_email: "bot@moox.org"
